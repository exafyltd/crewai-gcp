name: Gate-Quick
on:
  workflow_dispatch:
  push:
    paths:
      - "services/agents/worker-core/**"
      - "crew_template/schemas/**"
      - ".github/workflows/gate.yml"

jobs:
  gate:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    env:
      GCP_PROJECT: lovable-vitana-vers1
      GCP_REGION: us-central1
      SERVICE: worker-core

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          export_default_credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Deploy & smoke
        run: |
          set -e
          echo "::group::Deploy worker-core"
          gcloud run deploy "$SERVICE" --source services/agents/worker-core --region "${GCP_REGION}" --allow-unauthenticated --quiet
          RUN_URL="$(gcloud run services describe "$SERVICE" --region "${GCP_REGION}" --format='value(status.url)')"
          echo "RUN_URL=$RUN_URL"
          echo "::endgroup::"

          echo "::group::Warm-up"
          # up to ~60s warm-up
          for i in {1..30}; do
            if curl -fsS "$RUN_URL/health" >/dev/null; then
              echo "Warm OK on try $i"
              break
            fi
            sleep 2
          done
          # Show revision & top condition (debug)
          gcloud run services describe "$SERVICE" --region "${GCP_REGION}" \
            --format='value(status.latestCreatedRevisionName,status.conditions[-1].message,status.conditions[-1].status,status.conditions[-1].type)'
          echo "::endgroup::"

          echo "::group::Smoke tenants"
          set +e
          FAIL=0
          for t in maxina earthlings alkalma; do
            echo "== smoke: tenant=$t"
            RESP=$(curl -fsS -X POST "$RUN_URL/execute" \
              -H 'Content-Type: application/json' \
              -d "{\"plan_id\":\"smoke-$t\",\"tenant\":\"$t\",\"tasks\":[{\"id\":\"t1\",\"skill\":\"router.invoke_llm\",\"input\":{\"prompt\":\"ping\"}}],\"budget\":{\"tokens_max\":1000,\"cost_max_usd\":0.10}}")
            echo "$RESP"
            echo "$RESP" | jq -e '.status' >/dev/null || FAIL=1
          done
          set -e
          echo "::endgroup::"

          if [ "$FAIL" -ne 0 ]; then
            echo "::group::SERVICE LOGS (last 200 lines)"
            gcloud run services logs read "$SERVICE" --region "${GCP_REGION}" --limit=200 || true
            echo "::endgroup::"
            exit 1
          fi
